Problem:  Given a string containing just the characters '(', ')', '{', '}', '[', ']', determine if the input string is valid.

Problem Explanation:
A string is valid if the brackets are closed in the correct order. For example, {[]} is valid, but ([)] is not.

Approach:
1.Use a stack to keep track of opening brackets.
2.For every closing bracket, check if it matches the top of the stack (i.e., the corresponding opening bracket).
3.If the stack is empty or a mismatch occurs, return False.
4.If the stack is empty at the end, the string is valid.

Code:
def is_valid(s: str) -> bool:
    stack = []
    matching_brackets = {')': '(', '}': '{', ']': '['}
    
    for char in s:
        if char in matching_brackets.values():  # If it's an opening bracket
            stack.append(char)
        elif char in matching_brackets:  # If it's a closing bracket
            if not stack or stack[-1] != matching_brackets[char]:
                return False
            stack.pop()
    
    return not stack  # Return True if stack is empty (all brackets are matched)

# Example
print(is_valid("{[]()}"))  # Output: True
print(is_valid("([)]"))    # Output: False

Explanation:
The stack helps ensure that each closing bracket matches the most recent opening bracket.
The time complexity is O(n), where n is the length of the string, and the space complexity is O(n) due to the stack.
